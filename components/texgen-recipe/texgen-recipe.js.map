{"version":3,"file":"texgen-recipe.js","sources":["recipeToBody.js","bodyToFunction.js","recipeToFunction.js","formatRecipe.js","componentOnIndex.js","componentToIndex.js","params.js"],"sourcesContent":["import * as TG from '../texgen';\r\nimport {HEIGHT, WIDTH} from './params';\r\n\r\nexport function recipeToBody(formula, proportional = false, block = '') {\r\n    let r = ['new TG.Texture(' + WIDTH + ', ' + HEIGHT + ')'];\r\n    let CR = '\\n';\r\n    let SP = '  ';\r\n\r\n    (formula || []).forEach(function (part) {\r\n        if (!part) {\r\n            return;\r\n        }\r\n\r\n        let def = TG[part.program.type];\r\n\r\n        if (!def || part.$hide) {\r\n            return;\r\n        }\r\n\r\n        let g;\r\n\r\n        // if (part.program.type === 'PutTexture') {\r\n        //     g = 'new TG.' + part.program.type + '(' + recipeToBody(part.program.texture || [], proportional, SP + block) + ')';\r\n        // } else {\r\n        g = 'new TG.' + part.program.type + '()';\r\n        Object.keys(part.program)\r\n            .filter(function (p) {\r\n                return (p !== 'type') && def.params && def.params[p];\r\n            })\r\n            .forEach(function (p) {\r\n                if (p === 'point') {\r\n                    (part.program[p] || []).forEach(function (b) {\r\n                        g += CR + block + SP + SP + '.' + p + '(' + b[0] + ', [' + b[1].join(', ') + '])';\r\n                    });\r\n                } else if (p === 'texture') {\r\n                    g += CR + block + SP + SP + '.' + p + '(' + recipeToBody(part.program.texture || [], proportional, SP + SP + block) + ')';\r\n                } else {\r\n                    let a = getValue(part.program[p], TG[part.program.type].params && TG[part.program.type].params[p], proportional);\r\n                    g += CR + block + SP + SP + '.' + p + '(' + a + ')';\r\n                }\r\n            });\r\n        // }\r\n\r\n        g += CR + block + SP + SP + '.tint(' + part.tint.join(', ') + ')';\r\n\r\n        let s = '.' + (part.operation || 'set') + '(' + g + ')';\r\n\r\n        r.push(s);\r\n    });\r\n\r\n    return r.join(CR + block + SP) + (block ? '' : ';');\r\n}\r\n\r\nfunction getValue(val, param, proportional) {\r\n    if ((param.scale !== undefined) && proportional) {\r\n        return val.join ? val.map((v) => scaled(v, param.scale)).join(', ') : scaled(val, param.scale);\r\n    } else {\r\n        return val.join ? val.join(', ') : val;\r\n    }\r\n}\r\n\r\nfunction scaled(v, s) {\r\n    if (s) {\r\n        return (v / 256) + ('*' + WIDTH);\r\n    } else {\r\n        return (v * 256) + ('/' + WIDTH);\r\n    }\r\n}\r\n","import {HEIGHT, WIDTH} from './params';\r\n\r\nexport function bodyToFunction(body) {\r\n    return new Function(WIDTH, HEIGHT, 'return ' + body);\r\n}\r\n","import {recipeToBody} from './recipeToBody';\r\nimport {bodyToFunction} from './bodyToFunction';\r\n\r\nexport function recipeToFunction(formula) {\r\n    return bodyToFunction(recipeToBody(formula));\r\n}\r\n","export function formatRecipe(render, precision = 2, removeHide = false) {\r\n    const ret = [];\r\n\r\n    render.forEach((d) => {\r\n        const r = {\r\n            operation: d.operation\r\n        };\r\n\r\n        if (removeHide && d.$hide) {\r\n            return;\r\n        } else if (!removeHide && (d.$hide !== undefined)) {\r\n            r.$hide = d.$hide;\r\n        }\r\n\r\n        if (d.tint) {\r\n            r.tint = d.tint.map((n) => {\r\n                return formatNumber(n, precision);\r\n            });\r\n        }\r\n\r\n        r.program = {};\r\n\r\n        Object.keys(d.program).forEach((p) => {\r\n            var v = d.program[p];\r\n\r\n            if (Array.isArray(v)) {\r\n                v = v.map((n) => {\r\n                    if (typeof n === 'number') {\r\n                        return formatNumber(n, precision)\r\n                    } else {\r\n                        if (Array.isArray(n)) {\r\n                            return n.map((m) => {\r\n                                if (typeof m === 'number') {\r\n                                    return formatNumber(m, precision)\r\n                                } else {\r\n                                    return m;\r\n                                }\r\n                            });\r\n                        } else {\r\n                            return n;\r\n                        }\r\n                    }\r\n                });\r\n            } else if (typeof v === 'number') {\r\n                v = formatNumber(v, precision);\r\n            }\r\n\r\n            r.program[p] = v;\r\n        });\r\n\r\n        ret.push(r);\r\n    });\r\n\r\n    return ret;\r\n}\r\n\r\nfunction formatNumber(n, p) {\r\n    if (p) {\r\n        return parseFloat(n.toPrecision(p));\r\n    } else {\r\n        return n;\r\n    }\r\n}\r\n","import * as TG from '../texgen';\r\n\r\nexport function componentOnIndex(formula, index) {\r\n    let f = {...formula[index]};\r\n    f.operation = 'set';\r\n    delete f.$hide;\r\n\r\n    return !TG.Programs.Filters[f.program.type]\r\n        ? f.program.texture ? f.program.texture : [f]\r\n        : null;\r\n}\r\n","export function componentToIndex(formula, index) {\r\n    let f = [];\r\n\r\n    for (let j = 0; j <= index; j++) {\r\n        f.push(formula[j]);\r\n    }\r\n\r\n    return f;\r\n}\r\n","export const WIDTH = 'w';\r\nexport const HEIGHT = 'h';\r\n"],"names":["recipeToBody","formula","proportional","block","r","WIDTH","HEIGHT","CR","SP","forEach","part","def","TG","program","type","$hide","g","keys","filter","p","params","b","join","texture","a","getValue","tint","s","operation","push","val","param","undefined","scale","map","v","scaled","bodyToFunction","body","Function","recipeToFunction","formatRecipe","render","precision","removeHide","ret","d","n","formatNumber","Array","isArray","m","parseFloat","toPrecision","componentOnIndex","index","f","Filters","componentToIndex","j"],"mappings":"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"}
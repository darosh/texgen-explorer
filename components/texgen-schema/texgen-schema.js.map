{"version":3,"file":"texgen-schema.js","sources":["getSchema.js"],"sourcesContent":["let schema = null;\r\n\r\nimport * as TG from '../texgen';\r\n\r\nexport function getSchema() {\r\n    if (schema) {\r\n        return schema;\r\n    }\r\n\r\n    const s = {\r\n        type: \"object\",\r\n        properties: {\r\n            render: {\r\n                $ref: \"#/definitions/texture\"\r\n            }\r\n        },\r\n        required: [\r\n            \"render\"\r\n        ],\r\n        definitions: {\r\n            operation: {},\r\n            texture: {\r\n                type: \"array\",\r\n                minItems: 3,\r\n                maxItems: 7,\r\n                items: {\r\n                    type: \"object\",\r\n                    properties: {\r\n                        operation: {\r\n                            $ref: \"#/definitions/operation\"\r\n                        },\r\n                        tint: {\r\n                            $ref: \"#/definitions/tint\"\r\n                        },\r\n                        program: {\r\n                            anyOf: []\r\n                        }\r\n                    },\r\n                    required: [\r\n                        \"operation\",\r\n                        \"program\"\r\n                    ]\r\n                }\r\n\r\n            },\r\n            tint: {\r\n                type: \"array\",\r\n                minItems: 3,\r\n                maxItems: 4,\r\n                items: {\r\n                    type: \"number\",\r\n                    minimum: 0,\r\n                    maximum: 1,\r\n                    'default': 0.5\r\n                }\r\n            },\r\n            color: {\r\n                type: \"array\",\r\n                minItems: 3,\r\n                maxItems: 3,\r\n                items: {\r\n                    type: \"number\",\r\n                    minimum: 0,\r\n                    maximum: 1,\r\n                    'default': 0.5\r\n                }\r\n            },\r\n            point: {\r\n                type: \"array\",\r\n                minItems: 2,\r\n                maxItems: 8,\r\n                items: {\r\n                    type: \"array\",\r\n                    items: [\r\n                        {\r\n                            type: \"number\",\r\n                            minimum: 0,\r\n                            maximum: 1,\r\n                            'default': 0.5\r\n                        },\r\n                        {\r\n                            $ref: \"#/definitions/color\"\r\n                        }\r\n                    ]\r\n                },\r\n                'default': [[0, [0, 0, 0]], [.4, [1, 1, 1]], [.6, [1, 1, 1]], [1, [0, 0, 0]]]\r\n            },\r\n            interpolation: {\r\n                'enum': [\r\n                    0,\r\n                    1,\r\n                    2\r\n                ],\r\n                'default': 1\r\n            }\r\n        }\r\n    };\r\n\r\n    s.definitions.operation.enum = Object.keys(TG.Operations);\r\n\r\n    let r = s.definitions.texture.items.properties.program.anyOf;\r\n\r\n    addPrograms(s, 'generators', TG.Programs.Generators, r, TG);\r\n    addPrograms(s, 'filters', TG.Programs.Filters, r, TG);\r\n    addPrograms(s, 'mixers', TG.Programs.Mixers, r, TG);\r\n\r\n    schema = s;\r\n\r\n    return s;\r\n}\r\n\r\nfunction addPrograms(s, n, l, r, TG) {\r\n    Object.keys(l).forEach((k) => {\r\n        r.push({\r\n            $ref: '#/definitions/' + n + '/definitions/' + k\r\n        });\r\n\r\n        s.definitions[n] = s.definitions[n] || {definitions: {}};\r\n\r\n        let o = s.definitions[n].definitions[k] = {\r\n            properties: {\r\n                type: {\r\n                    enum: [k]\r\n                }\r\n            },\r\n            required: ['type']\r\n        };\r\n\r\n        if (l[k].params) {\r\n            Object.keys(l[k].params).forEach((p) => {\r\n                let q = o.properties[p] = {};\r\n                let t = l[k].params[p];\r\n                let pt = {\r\n                    isArray: Array.isArray(t.val),\r\n                    type: t.type || 0,\r\n                    min: !isNaN(t.min) ? t.min : -256,\r\n                    max: !isNaN(t.max) ? t.max : 256,\r\n                    length: Array.isArray(t.val) ? t.val.length : 1,\r\n                    val: t.val\r\n                };\r\n\r\n                if (pt.isArray) {\r\n                    q.type = 'array';\r\n                    q.items = {\r\n                        type: pt.type ? 'number' : 'integer',\r\n                        minimum: pt.min,\r\n                        maximum: pt.max\r\n                    };\r\n\r\n                    q.minItems = pt.length;\r\n                    q.maxItems = pt.length;\r\n                } else if (pt.type === TG.Type.BOOLEAN) {\r\n                    q.type = 'boolean';\r\n                } else if (pt.type === TG.Type.COLOR_POINT) {\r\n                    q.$ref = '#/definitions/point';\r\n                } else if (pt.type === TG.Type.INTERPOLATION) {\r\n                    q.$ref = '#/definitions/interpolation';\r\n                } else if (pt.type === TG.Type.NUMBER) {\r\n                    q.type = 'number';\r\n                    q.minimum = pt.min;\r\n                    q.maximum = pt.max;\r\n                } else if (pt.type === TG.Type.INT) {\r\n                    q.type = 'integer';\r\n                    q.minimum = pt.min;\r\n                    q.maximum = pt.max;\r\n                }\r\n\r\n                q.default = pt.val;\r\n            })\r\n        }\r\n\r\n        if (k === 'PutTexture') {\r\n            o.properties.texture = {\r\n                $ref: \"#/definitions/texture\"\r\n            };\r\n        }\r\n    });\r\n}\r\n"],"names":["getSchema","schema","s","definitions","operation","enum","Object","keys","TG","r","texture","items","properties","program","anyOf","Generators","Filters","Mixers","addPrograms","n","l","forEach","k","push","o","params","p","q","t","pt","Array","isArray","val","type","isNaN","min","max","length","minItems","maxItems","Type","BOOLEAN","COLOR_POINT","$ref","INTERPOLATION","NUMBER","minimum","maximum","INT","default"],"mappings":"oPAEA,SAEgBA,QACRC,QACOA,MAGLC,SACI,kCAGQ,oCAIV,kDAKU,iBACI,WACA,cAEA,qCAGQ,sCAGA,oDAOV,YACA,wBAMF,iBACI,WACA,cAEA,iBACG,UACA,UACE,iBAIT,iBACI,WACA,cAEA,iBACG,UACA,UACE,iBAIT,iBACI,WACA,cAEA,qBAGQ,iBACG,UACA,UACE,UAGL,mCAIL,GAAI,EAAG,EAAG,KAAM,IAAK,EAAG,EAAG,KAAM,IAAK,EAAG,EAAG,KAAM,GAAI,EAAG,EAAG,2BAIrE,EACA,EACA,WAEO,OAKrBC,YAAYC,UAAUC,KAAOC,OAAOC,KAAKC,iBAEvCC,GAAIP,EAAEC,YAAYO,QAAQC,MAAMC,WAAWC,QAAQC,eAE3CZ,EAAG,aAAcM,WAAYO,WAAYN,EAAGD,KAC5CN,EAAG,UAAWM,WAAYQ,QAASP,EAAGD,KACtCN,EAAG,SAAUM,WAAYS,OAAQR,EAAGD,KAEvCN,EAEFA,EAGX,QAASgB,GAAYhB,EAAGiB,EAAGC,EAAGX,EAAGD,UACtBD,KAAKa,GAAGC,QAAQ,SAACC,KAClBC,WACQ,iBAAmBJ,EAAI,gBAAkBG,MAGjDnB,YAAYgB,GAAKjB,EAAEC,YAAYgB,KAAOhB,mBAEpCqB,GAAItB,EAAEC,YAAYgB,GAAGhB,YAAYmB,4BAGlBA,eAGJ,QAGXF,GAAEE,GAAGG,eACElB,KAAKa,EAAEE,GAAGG,QAAQJ,QAAQ,SAACK,MAC1BC,GAAIH,EAAEZ,WAAWc,MACjBE,EAAIR,EAAEE,GAAGG,OAAOC,GAChBG,WACSC,MAAMC,QAAQH,EAAEI,UACnBJ,EAAEK,MAAQ,MACVC,MAAMN,EAAEO,MAAe,IAARP,EAAEO,QACjBD,MAAMN,EAAEQ,KAAe,IAARR,EAAEQ,WACfN,MAAMC,QAAQH,EAAEI,KAAOJ,EAAEI,IAAIK,OAAS,MACzCT,EAAEI,IAGPH,GAAGE,WACDE,KAAO,UACPtB,YACQkB,EAAGI,KAAO,SAAW,kBAClBJ,EAAGM,YACHN,EAAGO,OAGdE,SAAWT,EAAGQ,SACdE,SAAWV,EAAGQ,QACTR,EAAGI,OAASzB,EAAGgC,KAAKC,UACzBR,KAAO,UACFJ,EAAGI,OAASzB,EAAGgC,KAAKE,cACzBC,KAAO,sBACFd,EAAGI,OAASzB,EAAGgC,KAAKI,gBACzBD,KAAO,8BACFd,EAAGI,OAASzB,EAAGgC,KAAKK,UACzBZ,KAAO,WACPa,QAAUjB,EAAGM,MACbY,QAAUlB,EAAGO,KACRP,EAAGI,OAASzB,EAAGgC,KAAKQ,QACzBf,KAAO,YACPa,QAAUjB,EAAGM,MACbY,QAAUlB,EAAGO,OAGjBa,QAAUpB,EAAGG,MAIb,eAANV,MACEV,WAAWF,cACH,4BA7KtB,GAAIT,GAAS"}